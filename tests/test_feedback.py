# tests/test_review_api.py

import os
import json
import pytest
from flask.testing import FlaskClient
from smartscripts.app import create_app  # Import your Flask app factory

# ─── App setup ────────────────────────────────────────

app = create_app("default")  # or "development"
client: FlaskClient = app.test_client()

# Paths for file outputs generated by endpoints
FEEDBACK_FILE = "output/feedback.json"
ANNOTATED_IMAGE = "output/annotated.png"


# ─── Fixtures ────────────────────────────────────────

@pytest.fixture
def teacher_review_payload():
    """Payload for testing teacher review endpoint with manual override."""
    return {
        "question_number": 1,
        "student_answer": "The value of x is 2",
        "correct_answer": "x = 3",
        "rubric": [
            {"keyword": "x", "weight": 2},
            {"keyword": "=", "weight": 1},
            {"keyword": "3", "weight": 2}
        ],
        "max_marks": 5,
        "manual_override": True,
        "manual_score": 4,
        "manual_feedback": "Good effort, but check your calculation."
    }


@pytest.fixture
def student_review_payload():
    """Payload for testing student review endpoint and feedback overlay."""
    return {
        "student_id": "stu123",
        "question_number": 2,
        "student_answer": "Area = 12",
        "expected_answer": "Area = 12",
        "max_marks": 5
    }


# ─── Helper ──────────────────────────────────────────

def cleanup_files():
    """Remove output files if they exist to ensure clean test runs."""
    if os.path.exists(FEEDBACK_FILE):
        os.remove(FEEDBACK_FILE)
    if os.path.exists(ANNOTATED_IMAGE):
        os.remove(ANNOTATED_IMAGE)


# ─── Tests ───────────────────────────────────────────

def test_teacher_review_manual_override(teacher_review_payload):
    """
    Test teacher review endpoint with manual override feedback.
    """
    response = client.post("/api/teacher/review", json=teacher_review_payload)
    assert response.status_code == 200

    data = response.get_json()
    assert "score" in data
    assert "feedback" in data
    assert isinstance(data["score"], (int, float))
    assert isinstance(data["feedback"], str)
    assert data["score"] == teacher_review_payload["manual_score"]
    assert teacher_review_payload["manual_feedback"] in data["feedback"]


def test_student_review_feedback_overlay(student_review_payload):
    """
    Test student review endpoint, expecting feedback overlay and file generation.
    """
    cleanup_files()  # Ensure clean slate before test
    response = client.post("/api/student/review", json=student_review_payload)
    assert response.status_code == 200

    data = response.get_json()
    assert "score" in data
    assert "feedback" in data
    assert isinstance(data["score"], (int, float))
    assert isinstance(data["feedback"], str)
    assert "correct" in data["feedback"].lower() or "well done" in data["feedback"].lower()

    # Check that feedback.json and annotated.png were created
    assert os.path.exists(FEEDBACK_FILE), "feedback.json not found"
    assert os.path.exists(ANNOTATED_IMAGE), "annotated.png not found"

    # Optional: verify contents of feedback.json
    with open(FEEDBACK_FILE, "r") as f:
        feedback_data = json.load(f)
        assert "student_id" in feedback_data
        assert feedback_data["student_id"] == student_review_payload["student_id"]

    cleanup_files()  # Clean up after test


def test_teacher_review_missing_fields():
    """
    Test teacher review endpoint error handling on missing required fields.
    """
    incomplete_payload = {
        "question_number": 1,
        "student_answer": "x = 2",
        # Missing correct_answer, rubric, max_marks
    }
    response = client.post("/api/teacher/review", json=incomplete_payload)
    assert response.status_code == 400 or response.status_code == 422


def test_student_review_invalid_types():
    """
    Test student review endpoint error handling with wrong data types.
    """
    invalid_payload = {
        "student_id": 123,             # should be str
        "question_number": "two",      # should be int
        "student_answer": 12,          # should be str
        "expected_answer": None,       # should be str
        "max_marks": "five"            # should be int
    }
    response = client.post("/api/student/review", json=invalid_payload)
    assert response.status_code == 400 or response.status_code == 422


# ─── Run as script ────────────────────────────────────

if __name__ == "__main__":
    pytest.main([__file__])
