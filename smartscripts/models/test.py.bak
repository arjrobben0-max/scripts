from sqlalchemy import Column, Integer, String, Text, Date, Boolean, DateTime, ForeignKey
from sqlalchemy.orm import relationship, validates
from datetime import datetime
from smartscripts.extensions import db
import os
from flask import current_app

class Test(db.Model):
    __tablename__ = 'tests'

    id = Column(Integer, primary_key=True)
    title = Column(String(255), nullable=False)
    subject = Column(String(100), nullable=False)
    exam_date = Column(Date, nullable=False)
    grade_level = Column(String(50), nullable=False)
    description = Column(Text, nullable=True)

    # File paths (single source of truth naming)
    question_paper_path = Column(String(255), nullable=True)      # Question paper PDF (was test_pdf_path)
    rubric_path = Column(String(255), nullable=True)              # Rubric PDF (was rubric_pdf_path)
    # marking_guide_path removed, use relationship instead
    answered_script_path = Column(String(255), nullable=True)     # Sample answered script PDF (unchanged)
    class_list_path = Column(String(255), nullable=True)          # Class list CSV/TXT (was student_ids_path)
    combined_scripts_path = Column(String(255), nullable=True)    # Combined scanned scripts PDF (unchanged)
    attendance_path = Column(String(255), nullable=True)          # Attendance file path (optional)
    presence_csv_path = Column(String(255), nullable=True)        # Presence CSV export path (optional)

    # Flags
    reviewed_by_teacher = Column(Boolean, default=False)
    is_active = Column(Boolean, default=True)
    is_locked = Column(Boolean, default=False)

    # Timestamps
    date = Column(DateTime, default=datetime.utcnow)
    created_at = Column(DateTime, default=datetime.utcnow)

    # Foreign key
    teacher_id = Column(Integer, ForeignKey('users.id'), nullable=False)

    # Relationships
    teacher = relationship('User', back_populates='tests')
    scripts = relationship('TestScript', back_populates='test', cascade="all, delete-orphan")
    submissions = relationship('TestSubmission', back_populates='test', cascade="all, delete-orphan")
    student_submissions = relationship('StudentSubmission', back_populates='test')
    marking_guide = relationship('MarkingGuide', back_populates='test', uselist=False)
    override_logs = relationship('OCROverrideLog', back_populates='test')
    page_reviews = relationship('PageReview', back_populates='test')
    marksheet = relationship('Marksheet', back_populates='test', uselist=False)

    @validates(
        'question_paper_path', 'rubric_path', 'answered_script_path',
        'class_list_path', 'combined_scripts_path', 'attendance_path', 'presence_csv_path'
    )
    def validate_paths(self, key, value):
        if value and str(value).strip():
            return value.strip()
        return None

    def __repr__(self):
        exam_date_str = self.exam_date.strftime('%Y-%m-%d') if self.exam_date else 'No Date'
        return f"<Test {self.title} on {exam_date_str}>"

    def get_marking_guide_filename(self):
        """Return the marking guide filename if available."""
        return self.marking_guide.filename if self.marking_guide else None

    def get_marking_guide_path(self):
        """Example: Get full path in upload folder based on related marking guide filename."""
        filename = self.get_marking_guide_filename()
        if filename:
            return os.path.join(current_app.config['UPLOAD_FOLDER'], filename)
        return None
